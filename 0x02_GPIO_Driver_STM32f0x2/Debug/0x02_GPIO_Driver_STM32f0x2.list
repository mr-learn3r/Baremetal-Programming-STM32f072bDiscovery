
0x02_GPIO_Driver_STM32f0x2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000068c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800074c  08000754  00001754  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800074c  0800074c  00001754  2**0
                  CONTENTS
  4 .ARM          00000000  0800074c  0800074c  00001754  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800074c  08000754  00001754  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800074c  0800074c  0000174c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000750  08000750  00001750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001754  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000754  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000754  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00001754  2**0
                  CONTENTS, READONLY
 12 .debug_info   000007ff  00000000  00000000  0000177c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000288  00000000  00000000  00001f7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  00002208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000073  00000000  00000000  000022b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000201c  00000000  00000000  00002323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000f2f  00000000  00000000  0000433f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000082a1  00000000  00000000  0000526e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000d50f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001b0  00000000  00000000  0000d554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0000d704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000734 	.word	0x08000734

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000734 	.word	0x08000734

08000108 <delay>:
#include <GPIO_drv.h>
#include <stdlib.h>

/*Delay function*/
void delay (void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
	for(uint32_t x=0;x<500000;++x);
 800010e:	2300      	movs	r3, #0
 8000110:	607b      	str	r3, [r7, #4]
 8000112:	e002      	b.n	800011a <delay+0x12>
 8000114:	687b      	ldr	r3, [r7, #4]
 8000116:	3301      	adds	r3, #1
 8000118:	607b      	str	r3, [r7, #4]
 800011a:	687b      	ldr	r3, [r7, #4]
 800011c:	4a03      	ldr	r2, [pc, #12]	@ (800012c <delay+0x24>)
 800011e:	4293      	cmp	r3, r2
 8000120:	d9f8      	bls.n	8000114 <delay+0xc>
}
 8000122:	46c0      	nop			@ (mov r8, r8)
 8000124:	46c0      	nop			@ (mov r8, r8)
 8000126:	46bd      	mov	sp, r7
 8000128:	b002      	add	sp, #8
 800012a:	bd80      	pop	{r7, pc}
 800012c:	0007a11f 	.word	0x0007a11f

08000130 <main>:

int main(void)
{
 8000130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000132:	b08d      	sub	sp, #52	@ 0x34
 8000134:	af00      	add	r7, sp, #0
	GPIO_Handle_t Red_Led;
	GPIO_Handle_t Green_Led;
	GPIO_Handle_t Blue_Led;

	Red_Led.pGPIOx = GPIOA;
 8000136:	2528      	movs	r5, #40	@ 0x28
 8000138:	197b      	adds	r3, r7, r5
 800013a:	2290      	movs	r2, #144	@ 0x90
 800013c:	05d2      	lsls	r2, r2, #23
 800013e:	601a      	str	r2, [r3, #0]
    Red_Led.pGPIO_Pinconfig = &(GPIO_Pinconfig_t) {
 8000140:	2410      	movs	r4, #16
 8000142:	193b      	adds	r3, r7, r4
 8000144:	0018      	movs	r0, r3
 8000146:	2306      	movs	r3, #6
 8000148:	001a      	movs	r2, r3
 800014a:	2100      	movs	r1, #0
 800014c:	f000 fac5 	bl	80006da <memset>
 8000150:	0021      	movs	r1, r4
 8000152:	187b      	adds	r3, r7, r1
 8000154:	2208      	movs	r2, #8
 8000156:	701a      	strb	r2, [r3, #0]
 8000158:	187b      	adds	r3, r7, r1
 800015a:	2201      	movs	r2, #1
 800015c:	705a      	strb	r2, [r3, #1]
 800015e:	187b      	adds	r3, r7, r1
 8000160:	2202      	movs	r2, #2
 8000162:	709a      	strb	r2, [r3, #2]
 8000164:	197b      	adds	r3, r7, r5
 8000166:	187a      	adds	r2, r7, r1
 8000168:	605a      	str	r2, [r3, #4]
        .PinSpeed = GPIO_SPEED_FAST,
        .PinPUPDControl = GPIO_PIN_NO_PUPD,
        .PinOPType = GPIO_OP_TYPE_PP
    };

    Green_Led.pGPIOx = GPIOA;
 800016a:	2620      	movs	r6, #32
 800016c:	19bb      	adds	r3, r7, r6
 800016e:	2290      	movs	r2, #144	@ 0x90
 8000170:	05d2      	lsls	r2, r2, #23
 8000172:	601a      	str	r2, [r3, #0]
    Green_Led.pGPIO_Pinconfig = &(GPIO_Pinconfig_t) {
 8000174:	2408      	movs	r4, #8
 8000176:	193b      	adds	r3, r7, r4
 8000178:	0018      	movs	r0, r3
 800017a:	2306      	movs	r3, #6
 800017c:	001a      	movs	r2, r3
 800017e:	2100      	movs	r1, #0
 8000180:	f000 faab 	bl	80006da <memset>
 8000184:	0021      	movs	r1, r4
 8000186:	187b      	adds	r3, r7, r1
 8000188:	2209      	movs	r2, #9
 800018a:	701a      	strb	r2, [r3, #0]
 800018c:	187b      	adds	r3, r7, r1
 800018e:	2201      	movs	r2, #1
 8000190:	705a      	strb	r2, [r3, #1]
 8000192:	187b      	adds	r3, r7, r1
 8000194:	2202      	movs	r2, #2
 8000196:	709a      	strb	r2, [r3, #2]
 8000198:	0034      	movs	r4, r6
 800019a:	193b      	adds	r3, r7, r4
 800019c:	187a      	adds	r2, r7, r1
 800019e:	605a      	str	r2, [r3, #4]
        .PinSpeed = GPIO_SPEED_FAST,
        .PinPUPDControl = GPIO_PIN_NO_PUPD,
        .PinOPType = GPIO_OP_TYPE_PP
    };

    Blue_Led.pGPIOx = GPIOA;
 80001a0:	2618      	movs	r6, #24
 80001a2:	19bb      	adds	r3, r7, r6
 80001a4:	2290      	movs	r2, #144	@ 0x90
 80001a6:	05d2      	lsls	r2, r2, #23
 80001a8:	601a      	str	r2, [r3, #0]
    Blue_Led.pGPIO_Pinconfig = &(GPIO_Pinconfig_t) {
 80001aa:	003b      	movs	r3, r7
 80001ac:	0018      	movs	r0, r3
 80001ae:	2306      	movs	r3, #6
 80001b0:	001a      	movs	r2, r3
 80001b2:	2100      	movs	r1, #0
 80001b4:	f000 fa91 	bl	80006da <memset>
 80001b8:	003b      	movs	r3, r7
 80001ba:	220a      	movs	r2, #10
 80001bc:	701a      	strb	r2, [r3, #0]
 80001be:	003b      	movs	r3, r7
 80001c0:	2201      	movs	r2, #1
 80001c2:	705a      	strb	r2, [r3, #1]
 80001c4:	003b      	movs	r3, r7
 80001c6:	2202      	movs	r2, #2
 80001c8:	709a      	strb	r2, [r3, #2]
 80001ca:	19bb      	adds	r3, r7, r6
 80001cc:	003a      	movs	r2, r7
 80001ce:	605a      	str	r2, [r3, #4]
        .PinSpeed = GPIO_SPEED_FAST,
        .PinPUPDControl = GPIO_PIN_NO_PUPD,
        .PinOPType = GPIO_OP_TYPE_PP
    };

    if (GPIO_pClckCtrl(Red_Led.pGPIOx, ENABLE) != GPIO_OK ||
 80001d0:	197b      	adds	r3, r7, r5
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	2100      	movs	r1, #0
 80001d6:	0018      	movs	r0, r3
 80001d8:	f000 f974 	bl	80004c4 <GPIO_pClckCtrl>
 80001dc:	1e03      	subs	r3, r0, #0
 80001de:	d111      	bne.n	8000204 <main+0xd4>
           GPIO_init(&Red_Led) != GPIO_OK ||
 80001e0:	197b      	adds	r3, r7, r5
 80001e2:	0018      	movs	r0, r3
 80001e4:	f000 f899 	bl	800031a <GPIO_init>
 80001e8:	1e03      	subs	r3, r0, #0
    if (GPIO_pClckCtrl(Red_Led.pGPIOx, ENABLE) != GPIO_OK ||
 80001ea:	d10b      	bne.n	8000204 <main+0xd4>
           GPIO_init(&Green_Led) != GPIO_OK ||
 80001ec:	193b      	adds	r3, r7, r4
 80001ee:	0018      	movs	r0, r3
 80001f0:	f000 f893 	bl	800031a <GPIO_init>
 80001f4:	1e03      	subs	r3, r0, #0
           GPIO_init(&Red_Led) != GPIO_OK ||
 80001f6:	d105      	bne.n	8000204 <main+0xd4>
           GPIO_init(&Blue_Led) != GPIO_OK) {
 80001f8:	19bb      	adds	r3, r7, r6
 80001fa:	0018      	movs	r0, r3
 80001fc:	f000 f88d 	bl	800031a <GPIO_init>
 8000200:	1e03      	subs	r3, r0, #0
           GPIO_init(&Green_Led) != GPIO_OK ||
 8000202:	d002      	beq.n	800020a <main+0xda>
           // Handle error
           return -1;
 8000204:	2301      	movs	r3, #1
 8000206:	425b      	negs	r3, r3
 8000208:	e05a      	b.n	80002c0 <main+0x190>
    }

	while(1)
	{

	 GPIO_WriteToOutputPin (Green_Led.pGPIOx, Green_Led.pGPIO_Pinconfig->PinNum, 0);
 800020a:	2420      	movs	r4, #32
 800020c:	193b      	adds	r3, r7, r4
 800020e:	6818      	ldr	r0, [r3, #0]
 8000210:	193b      	adds	r3, r7, r4
 8000212:	685b      	ldr	r3, [r3, #4]
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	2200      	movs	r2, #0
 8000218:	0019      	movs	r1, r3
 800021a:	f000 fa1d 	bl	8000658 <GPIO_WriteToOutputPin>
	 GPIO_WriteToOutputPin (Blue_Led.pGPIOx, Blue_Led.pGPIO_Pinconfig->PinNum, 0);
 800021e:	2518      	movs	r5, #24
 8000220:	197b      	adds	r3, r7, r5
 8000222:	6818      	ldr	r0, [r3, #0]
 8000224:	197b      	adds	r3, r7, r5
 8000226:	685b      	ldr	r3, [r3, #4]
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	2200      	movs	r2, #0
 800022c:	0019      	movs	r1, r3
 800022e:	f000 fa13 	bl	8000658 <GPIO_WriteToOutputPin>
	 GPIO_ToggleOutputPin(Red_Led.pGPIOx, Red_Led.pGPIO_Pinconfig->PinNum);
 8000232:	2628      	movs	r6, #40	@ 0x28
 8000234:	19bb      	adds	r3, r7, r6
 8000236:	681a      	ldr	r2, [r3, #0]
 8000238:	19bb      	adds	r3, r7, r6
 800023a:	685b      	ldr	r3, [r3, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	0019      	movs	r1, r3
 8000240:	0010      	movs	r0, r2
 8000242:	f000 fa35 	bl	80006b0 <GPIO_ToggleOutputPin>
     delay();
 8000246:	f7ff ff5f 	bl	8000108 <delay>

     GPIO_WriteToOutputPin (Red_Led.pGPIOx, Red_Led.pGPIO_Pinconfig->PinNum, 0);
 800024a:	19bb      	adds	r3, r7, r6
 800024c:	6818      	ldr	r0, [r3, #0]
 800024e:	19bb      	adds	r3, r7, r6
 8000250:	685b      	ldr	r3, [r3, #4]
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	2200      	movs	r2, #0
 8000256:	0019      	movs	r1, r3
 8000258:	f000 f9fe 	bl	8000658 <GPIO_WriteToOutputPin>
     GPIO_WriteToOutputPin (Blue_Led.pGPIOx, Blue_Led.pGPIO_Pinconfig->PinNum, 0);
 800025c:	197b      	adds	r3, r7, r5
 800025e:	6818      	ldr	r0, [r3, #0]
 8000260:	197b      	adds	r3, r7, r5
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	2200      	movs	r2, #0
 8000268:	0019      	movs	r1, r3
 800026a:	f000 f9f5 	bl	8000658 <GPIO_WriteToOutputPin>
	 GPIO_ToggleOutputPin(Green_Led.pGPIOx, Green_Led.pGPIO_Pinconfig->PinNum);
 800026e:	193b      	adds	r3, r7, r4
 8000270:	681a      	ldr	r2, [r3, #0]
 8000272:	193b      	adds	r3, r7, r4
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	0019      	movs	r1, r3
 800027a:	0010      	movs	r0, r2
 800027c:	f000 fa18 	bl	80006b0 <GPIO_ToggleOutputPin>
	 delay();
 8000280:	f7ff ff42 	bl	8000108 <delay>

	 GPIO_WriteToOutputPin (Red_Led.pGPIOx, Red_Led.pGPIO_Pinconfig->PinNum, 0);
 8000284:	19bb      	adds	r3, r7, r6
 8000286:	6818      	ldr	r0, [r3, #0]
 8000288:	19bb      	adds	r3, r7, r6
 800028a:	685b      	ldr	r3, [r3, #4]
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	2200      	movs	r2, #0
 8000290:	0019      	movs	r1, r3
 8000292:	f000 f9e1 	bl	8000658 <GPIO_WriteToOutputPin>
	 GPIO_WriteToOutputPin (Green_Led.pGPIOx, Green_Led.pGPIO_Pinconfig->PinNum, 0);
 8000296:	193b      	adds	r3, r7, r4
 8000298:	6818      	ldr	r0, [r3, #0]
 800029a:	193b      	adds	r3, r7, r4
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	2200      	movs	r2, #0
 80002a2:	0019      	movs	r1, r3
 80002a4:	f000 f9d8 	bl	8000658 <GPIO_WriteToOutputPin>
	 GPIO_ToggleOutputPin(Blue_Led.pGPIOx, Blue_Led.pGPIO_Pinconfig->PinNum);
 80002a8:	197b      	adds	r3, r7, r5
 80002aa:	681a      	ldr	r2, [r3, #0]
 80002ac:	197b      	adds	r3, r7, r5
 80002ae:	685b      	ldr	r3, [r3, #4]
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	0019      	movs	r1, r3
 80002b4:	0010      	movs	r0, r2
 80002b6:	f000 f9fb 	bl	80006b0 <GPIO_ToggleOutputPin>
	 delay();
 80002ba:	f7ff ff25 	bl	8000108 <delay>
	 GPIO_WriteToOutputPin (Green_Led.pGPIOx, Green_Led.pGPIO_Pinconfig->PinNum, 0);
 80002be:	e7a4      	b.n	800020a <main+0xda>
	GPIO_deinit(Red_Led.pGPIOx);
	GPIO_deinit(Green_Led.pGPIOx);
	GPIO_deinit(Blue_Led.pGPIOx);

return 0;
}
 80002c0:	0018      	movs	r0, r3
 80002c2:	46bd      	mov	sp, r7
 80002c4:	b00d      	add	sp, #52	@ 0x34
 80002c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c8:	480d      	ldr	r0, [pc, #52]	@ (8000300 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002cc:	e000      	b.n	80002d0 <Reset_Handler+0x8>
 80002ce:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d0:	480c      	ldr	r0, [pc, #48]	@ (8000304 <LoopForever+0x6>)
  ldr r1, =_edata
 80002d2:	490d      	ldr	r1, [pc, #52]	@ (8000308 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d4:	4a0d      	ldr	r2, [pc, #52]	@ (800030c <LoopForever+0xe>)
  movs r3, #0
 80002d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d8:	e002      	b.n	80002e0 <LoopCopyDataInit>

080002da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002de:	3304      	adds	r3, #4

080002e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e4:	d3f9      	bcc.n	80002da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000310 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000314 <LoopForever+0x16>)
  movs r3, #0
 80002ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ec:	e001      	b.n	80002f2 <LoopFillZerobss>

080002ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f0:	3204      	adds	r2, #4

080002f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f4:	d3fb      	bcc.n	80002ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002f6:	f000 f9f9 	bl	80006ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002fa:	f7ff ff19 	bl	8000130 <main>

080002fe <LoopForever>:

LoopForever:
  b LoopForever
 80002fe:	e7fe      	b.n	80002fe <LoopForever>
  ldr   r0, =_estack
 8000300:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000308:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800030c:	08000754 	.word	0x08000754
  ldr r2, =_sbss
 8000310:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000314:	2000001c 	.word	0x2000001c

08000318 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000318:	e7fe      	b.n	8000318 <ADC_COMP_IRQHandler>

0800031a <GPIO_init>:
 * ===============================================================================================
 */

/* Initialize and Deinitialize */
GPIO_Status_t GPIO_init(GPIO_Handle_t *pGPIOhandle)
{
 800031a:	b580      	push	{r7, lr}
 800031c:	b084      	sub	sp, #16
 800031e:	af00      	add	r7, sp, #0
 8000320:	6078      	str	r0, [r7, #4]

    uint32_t pinOffset = (2 * pGPIOhandle->pGPIO_Pinconfig->PinNum);
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	685b      	ldr	r3, [r3, #4]
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	005b      	lsls	r3, r3, #1
 800032a:	60fb      	str	r3, [r7, #12]

	/* GPIO pin mode configuration */
	if(pGPIOhandle->pGPIO_Pinconfig->PinMode<= GPIO_MODE_ANALOG)
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	685b      	ldr	r3, [r3, #4]
 8000330:	785b      	ldrb	r3, [r3, #1]
 8000332:	2b03      	cmp	r3, #3
 8000334:	d81b      	bhi.n	800036e <GPIO_init+0x54>
	{
		/* Non interrupt mode */
		pGPIOhandle->pGPIOx->MODER  &= ~(0x3 << pinOffset); //Clearing pin
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	681a      	ldr	r2, [r3, #0]
 800033c:	2103      	movs	r1, #3
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	4099      	lsls	r1, r3
 8000342:	000b      	movs	r3, r1
 8000344:	43db      	mvns	r3, r3
 8000346:	0019      	movs	r1, r3
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	400a      	ands	r2, r1
 800034e:	601a      	str	r2, [r3, #0]
		pGPIOhandle->pGPIOx->MODER |= (pGPIOhandle->pGPIO_Pinconfig->PinMode << pinOffset);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	681a      	ldr	r2, [r3, #0]
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	685b      	ldr	r3, [r3, #4]
 800035a:	785b      	ldrb	r3, [r3, #1]
 800035c:	0019      	movs	r1, r3
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	4099      	lsls	r1, r3
 8000362:	000b      	movs	r3, r1
 8000364:	0019      	movs	r1, r3
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	430a      	orrs	r2, r1
 800036c:	601a      	str	r2, [r3, #0]
	}

    // GPIO pin mode configuration
    pGPIOhandle->pGPIOx->MODER &= ~(0x3 << pinOffset); // Clearing pin
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	681a      	ldr	r2, [r3, #0]
 8000374:	2103      	movs	r1, #3
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	4099      	lsls	r1, r3
 800037a:	000b      	movs	r3, r1
 800037c:	43db      	mvns	r3, r3
 800037e:	0019      	movs	r1, r3
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	400a      	ands	r2, r1
 8000386:	601a      	str	r2, [r3, #0]
    pGPIOhandle->pGPIOx->MODER |= (pGPIOhandle->pGPIO_Pinconfig->PinMode << pinOffset); // Setting pin
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	681a      	ldr	r2, [r3, #0]
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	785b      	ldrb	r3, [r3, #1]
 8000394:	0019      	movs	r1, r3
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	4099      	lsls	r1, r3
 800039a:	000b      	movs	r3, r1
 800039c:	0019      	movs	r1, r3
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	430a      	orrs	r2, r1
 80003a4:	601a      	str	r2, [r3, #0]

    // GPIO pin speed configuration
    pGPIOhandle->pGPIOx->OSPEEDR &= ~(0x3 << pinOffset); // Clearing pin
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	689a      	ldr	r2, [r3, #8]
 80003ac:	2103      	movs	r1, #3
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	4099      	lsls	r1, r3
 80003b2:	000b      	movs	r3, r1
 80003b4:	43db      	mvns	r3, r3
 80003b6:	0019      	movs	r1, r3
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	400a      	ands	r2, r1
 80003be:	609a      	str	r2, [r3, #8]
    pGPIOhandle->pGPIOx->OSPEEDR |= (pGPIOhandle->pGPIO_Pinconfig->PinSpeed << pinOffset); // Setting pin
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	689a      	ldr	r2, [r3, #8]
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	685b      	ldr	r3, [r3, #4]
 80003ca:	789b      	ldrb	r3, [r3, #2]
 80003cc:	0019      	movs	r1, r3
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	4099      	lsls	r1, r3
 80003d2:	000b      	movs	r3, r1
 80003d4:	0019      	movs	r1, r3
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	430a      	orrs	r2, r1
 80003dc:	609a      	str	r2, [r3, #8]

    // GPIO pull up/down settings configuration
    pGPIOhandle->pGPIOx->PUPDR &= ~(0x3 << pinOffset); // Clearing pin
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	68da      	ldr	r2, [r3, #12]
 80003e4:	2103      	movs	r1, #3
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	4099      	lsls	r1, r3
 80003ea:	000b      	movs	r3, r1
 80003ec:	43db      	mvns	r3, r3
 80003ee:	0019      	movs	r1, r3
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	400a      	ands	r2, r1
 80003f6:	60da      	str	r2, [r3, #12]
    pGPIOhandle->pGPIOx->PUPDR |= (pGPIOhandle->pGPIO_Pinconfig->PinPUPDControl << pinOffset); // Setting pin
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	68da      	ldr	r2, [r3, #12]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	78db      	ldrb	r3, [r3, #3]
 8000404:	0019      	movs	r1, r3
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	4099      	lsls	r1, r3
 800040a:	000b      	movs	r3, r1
 800040c:	0019      	movs	r1, r3
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	430a      	orrs	r2, r1
 8000414:	60da      	str	r2, [r3, #12]

	 if(pGPIOhandle->pGPIO_Pinconfig->PinMode == GPIO_MODE_ALTFN)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	785b      	ldrb	r3, [r3, #1]
 800041c:	2b02      	cmp	r3, #2
 800041e:	d14c      	bne.n	80004ba <GPIO_init+0x1a0>
	    {
	        /* Alt functionality registers configuration */
	        uint8_t LowHigherRegGPIO;

	        LowHigherRegGPIO = pGPIOhandle->pGPIO_Pinconfig->PinNum / 8;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	685b      	ldr	r3, [r3, #4]
 8000424:	781a      	ldrb	r2, [r3, #0]
 8000426:	200b      	movs	r0, #11
 8000428:	183b      	adds	r3, r7, r0
 800042a:	08d2      	lsrs	r2, r2, #3
 800042c:	701a      	strb	r2, [r3, #0]
	        if(LowHigherRegGPIO>7)
 800042e:	183b      	adds	r3, r7, r0
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	2b07      	cmp	r3, #7
 8000434:	d920      	bls.n	8000478 <GPIO_init+0x15e>
			{
	        	pGPIOhandle->pGPIOx->AFRL &= ~(0xF << (4 * LowHigherRegGPIO));
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	6a1a      	ldr	r2, [r3, #32]
 800043c:	183b      	adds	r3, r7, r0
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	210f      	movs	r1, #15
 8000444:	4099      	lsls	r1, r3
 8000446:	000b      	movs	r3, r1
 8000448:	43db      	mvns	r3, r3
 800044a:	0019      	movs	r1, r3
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	400a      	ands	r2, r1
 8000452:	621a      	str	r2, [r3, #32]
	        	pGPIOhandle->pGPIOx->AFRL |= pGPIOhandle->pGPIO_Pinconfig->PinAltFuncMode << (4 * LowHigherRegGPIO);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	6a1a      	ldr	r2, [r3, #32]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	685b      	ldr	r3, [r3, #4]
 800045e:	795b      	ldrb	r3, [r3, #5]
 8000460:	0019      	movs	r1, r3
 8000462:	183b      	adds	r3, r7, r0
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	009b      	lsls	r3, r3, #2
 8000468:	4099      	lsls	r1, r3
 800046a:	000b      	movs	r3, r1
 800046c:	0019      	movs	r1, r3
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	430a      	orrs	r2, r1
 8000474:	621a      	str	r2, [r3, #32]
 8000476:	e020      	b.n	80004ba <GPIO_init+0x1a0>
			}
	        else
	        {
	        	pGPIOhandle->pGPIOx->AFRH &= ~(0xF << (4 * LowHigherRegGPIO));
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800047e:	200b      	movs	r0, #11
 8000480:	183b      	adds	r3, r7, r0
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	210f      	movs	r1, #15
 8000488:	4099      	lsls	r1, r3
 800048a:	000b      	movs	r3, r1
 800048c:	43db      	mvns	r3, r3
 800048e:	0019      	movs	r1, r3
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	400a      	ands	r2, r1
 8000496:	625a      	str	r2, [r3, #36]	@ 0x24
	        	pGPIOhandle->pGPIOx->AFRH |= pGPIOhandle->pGPIO_Pinconfig->PinAltFuncMode << (4 * LowHigherRegGPIO);
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	685b      	ldr	r3, [r3, #4]
 80004a2:	795b      	ldrb	r3, [r3, #5]
 80004a4:	0019      	movs	r1, r3
 80004a6:	183b      	adds	r3, r7, r0
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	009b      	lsls	r3, r3, #2
 80004ac:	4099      	lsls	r1, r3
 80004ae:	000b      	movs	r3, r1
 80004b0:	0019      	movs	r1, r3
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	430a      	orrs	r2, r1
 80004b8:	625a      	str	r2, [r3, #36]	@ 0x24
	        }
	    }
	return GPIO_OK;
 80004ba:	2300      	movs	r3, #0
}
 80004bc:	0018      	movs	r0, r3
 80004be:	46bd      	mov	sp, r7
 80004c0:	b004      	add	sp, #16
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <GPIO_pClckCtrl>:
 * Return value			: NULL
 *
 * ===============================================================================================
 */

GPIO_Status_t GPIO_pClckCtrl(GPIO_Reg_t *pGPIOx, uint8_t state) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	000a      	movs	r2, r1
 80004ce:	1cfb      	adds	r3, r7, #3
 80004d0:	701a      	strb	r2, [r3, #0]
    if (state != ENABLE && state != DISABLE)
 80004d2:	1cfb      	adds	r3, r7, #3
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d005      	beq.n	80004e6 <GPIO_pClckCtrl+0x22>
 80004da:	1cfb      	adds	r3, r7, #3
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	2b01      	cmp	r3, #1
 80004e0:	d001      	beq.n	80004e6 <GPIO_pClckCtrl+0x22>
        return GPIO_ERROR_INVALID_STATE_VALUE;
 80004e2:	2303      	movs	r3, #3
 80004e4:	e09b      	b.n	800061e <GPIO_pClckCtrl+0x15a>

    switch ((uint32_t)pGPIOx) {
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4a4f      	ldr	r2, [pc, #316]	@ (8000628 <GPIO_pClckCtrl+0x164>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d100      	bne.n	80004f0 <GPIO_pClckCtrl+0x2c>
 80004ee:	e080      	b.n	80005f2 <GPIO_pClckCtrl+0x12e>
 80004f0:	4a4d      	ldr	r2, [pc, #308]	@ (8000628 <GPIO_pClckCtrl+0x164>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d900      	bls.n	80004f8 <GPIO_pClckCtrl+0x34>
 80004f6:	e08f      	b.n	8000618 <GPIO_pClckCtrl+0x154>
 80004f8:	4a4c      	ldr	r2, [pc, #304]	@ (800062c <GPIO_pClckCtrl+0x168>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d100      	bne.n	8000500 <GPIO_pClckCtrl+0x3c>
 80004fe:	e065      	b.n	80005cc <GPIO_pClckCtrl+0x108>
 8000500:	4a4a      	ldr	r2, [pc, #296]	@ (800062c <GPIO_pClckCtrl+0x168>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d900      	bls.n	8000508 <GPIO_pClckCtrl+0x44>
 8000506:	e087      	b.n	8000618 <GPIO_pClckCtrl+0x154>
 8000508:	4a49      	ldr	r2, [pc, #292]	@ (8000630 <GPIO_pClckCtrl+0x16c>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d04b      	beq.n	80005a6 <GPIO_pClckCtrl+0xe2>
 800050e:	4a48      	ldr	r2, [pc, #288]	@ (8000630 <GPIO_pClckCtrl+0x16c>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d900      	bls.n	8000516 <GPIO_pClckCtrl+0x52>
 8000514:	e080      	b.n	8000618 <GPIO_pClckCtrl+0x154>
 8000516:	4a47      	ldr	r2, [pc, #284]	@ (8000634 <GPIO_pClckCtrl+0x170>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d031      	beq.n	8000580 <GPIO_pClckCtrl+0xbc>
 800051c:	4a45      	ldr	r2, [pc, #276]	@ (8000634 <GPIO_pClckCtrl+0x170>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d900      	bls.n	8000524 <GPIO_pClckCtrl+0x60>
 8000522:	e079      	b.n	8000618 <GPIO_pClckCtrl+0x154>
 8000524:	2290      	movs	r2, #144	@ 0x90
 8000526:	05d2      	lsls	r2, r2, #23
 8000528:	4293      	cmp	r3, r2
 800052a:	d003      	beq.n	8000534 <GPIO_pClckCtrl+0x70>
 800052c:	4a42      	ldr	r2, [pc, #264]	@ (8000638 <GPIO_pClckCtrl+0x174>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d013      	beq.n	800055a <GPIO_pClckCtrl+0x96>
 8000532:	e071      	b.n	8000618 <GPIO_pClckCtrl+0x154>
        case (uint32_t)GPIOA:
            if (state == ENABLE) GPIOA_PCLCK_ENABLE();
 8000534:	1cfb      	adds	r3, r7, #3
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d107      	bne.n	800054c <GPIO_pClckCtrl+0x88>
 800053c:	4b3f      	ldr	r3, [pc, #252]	@ (800063c <GPIO_pClckCtrl+0x178>)
 800053e:	695a      	ldr	r2, [r3, #20]
 8000540:	4b3e      	ldr	r3, [pc, #248]	@ (800063c <GPIO_pClckCtrl+0x178>)
 8000542:	2180      	movs	r1, #128	@ 0x80
 8000544:	0289      	lsls	r1, r1, #10
 8000546:	430a      	orrs	r2, r1
 8000548:	615a      	str	r2, [r3, #20]
            else GPIOA_PCLCK_DISABLE();
            break;
 800054a:	e067      	b.n	800061c <GPIO_pClckCtrl+0x158>
            else GPIOA_PCLCK_DISABLE();
 800054c:	4b3b      	ldr	r3, [pc, #236]	@ (800063c <GPIO_pClckCtrl+0x178>)
 800054e:	695a      	ldr	r2, [r3, #20]
 8000550:	4b3a      	ldr	r3, [pc, #232]	@ (800063c <GPIO_pClckCtrl+0x178>)
 8000552:	493b      	ldr	r1, [pc, #236]	@ (8000640 <GPIO_pClckCtrl+0x17c>)
 8000554:	400a      	ands	r2, r1
 8000556:	615a      	str	r2, [r3, #20]
            break;
 8000558:	e060      	b.n	800061c <GPIO_pClckCtrl+0x158>
        case (uint32_t)GPIOB:
            if (state == ENABLE) GPIOB_PCLCK_ENABLE();
 800055a:	1cfb      	adds	r3, r7, #3
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d107      	bne.n	8000572 <GPIO_pClckCtrl+0xae>
 8000562:	4b36      	ldr	r3, [pc, #216]	@ (800063c <GPIO_pClckCtrl+0x178>)
 8000564:	695a      	ldr	r2, [r3, #20]
 8000566:	4b35      	ldr	r3, [pc, #212]	@ (800063c <GPIO_pClckCtrl+0x178>)
 8000568:	2180      	movs	r1, #128	@ 0x80
 800056a:	02c9      	lsls	r1, r1, #11
 800056c:	430a      	orrs	r2, r1
 800056e:	615a      	str	r2, [r3, #20]
            else GPIOB_PCLCK_DISABLE();
            break;
 8000570:	e054      	b.n	800061c <GPIO_pClckCtrl+0x158>
            else GPIOB_PCLCK_DISABLE();
 8000572:	4b32      	ldr	r3, [pc, #200]	@ (800063c <GPIO_pClckCtrl+0x178>)
 8000574:	695a      	ldr	r2, [r3, #20]
 8000576:	4b31      	ldr	r3, [pc, #196]	@ (800063c <GPIO_pClckCtrl+0x178>)
 8000578:	4932      	ldr	r1, [pc, #200]	@ (8000644 <GPIO_pClckCtrl+0x180>)
 800057a:	400a      	ands	r2, r1
 800057c:	615a      	str	r2, [r3, #20]
            break;
 800057e:	e04d      	b.n	800061c <GPIO_pClckCtrl+0x158>
        case (uint32_t)GPIOC:
            if (state == ENABLE) GPIOC_PCLCK_ENABLE();
 8000580:	1cfb      	adds	r3, r7, #3
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d107      	bne.n	8000598 <GPIO_pClckCtrl+0xd4>
 8000588:	4b2c      	ldr	r3, [pc, #176]	@ (800063c <GPIO_pClckCtrl+0x178>)
 800058a:	695a      	ldr	r2, [r3, #20]
 800058c:	4b2b      	ldr	r3, [pc, #172]	@ (800063c <GPIO_pClckCtrl+0x178>)
 800058e:	2180      	movs	r1, #128	@ 0x80
 8000590:	0309      	lsls	r1, r1, #12
 8000592:	430a      	orrs	r2, r1
 8000594:	615a      	str	r2, [r3, #20]
            else GPIOC_PCLCK_DISABLE();
            break;
 8000596:	e041      	b.n	800061c <GPIO_pClckCtrl+0x158>
            else GPIOC_PCLCK_DISABLE();
 8000598:	4b28      	ldr	r3, [pc, #160]	@ (800063c <GPIO_pClckCtrl+0x178>)
 800059a:	695a      	ldr	r2, [r3, #20]
 800059c:	4b27      	ldr	r3, [pc, #156]	@ (800063c <GPIO_pClckCtrl+0x178>)
 800059e:	492a      	ldr	r1, [pc, #168]	@ (8000648 <GPIO_pClckCtrl+0x184>)
 80005a0:	400a      	ands	r2, r1
 80005a2:	615a      	str	r2, [r3, #20]
            break;
 80005a4:	e03a      	b.n	800061c <GPIO_pClckCtrl+0x158>
        case (uint32_t)GPIOD:
            if (state == ENABLE) GPIOD_PCLCK_ENABLE();
 80005a6:	1cfb      	adds	r3, r7, #3
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d107      	bne.n	80005be <GPIO_pClckCtrl+0xfa>
 80005ae:	4b23      	ldr	r3, [pc, #140]	@ (800063c <GPIO_pClckCtrl+0x178>)
 80005b0:	695a      	ldr	r2, [r3, #20]
 80005b2:	4b22      	ldr	r3, [pc, #136]	@ (800063c <GPIO_pClckCtrl+0x178>)
 80005b4:	2180      	movs	r1, #128	@ 0x80
 80005b6:	0349      	lsls	r1, r1, #13
 80005b8:	430a      	orrs	r2, r1
 80005ba:	615a      	str	r2, [r3, #20]
            else GPIOD_PCLCK_DISABLE();
            break;
 80005bc:	e02e      	b.n	800061c <GPIO_pClckCtrl+0x158>
            else GPIOD_PCLCK_DISABLE();
 80005be:	4b1f      	ldr	r3, [pc, #124]	@ (800063c <GPIO_pClckCtrl+0x178>)
 80005c0:	695a      	ldr	r2, [r3, #20]
 80005c2:	4b1e      	ldr	r3, [pc, #120]	@ (800063c <GPIO_pClckCtrl+0x178>)
 80005c4:	4921      	ldr	r1, [pc, #132]	@ (800064c <GPIO_pClckCtrl+0x188>)
 80005c6:	400a      	ands	r2, r1
 80005c8:	615a      	str	r2, [r3, #20]
            break;
 80005ca:	e027      	b.n	800061c <GPIO_pClckCtrl+0x158>
        case (uint32_t)GPIOE:
            if (state == ENABLE) GPIOE_PCLCK_ENABLE();
 80005cc:	1cfb      	adds	r3, r7, #3
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d107      	bne.n	80005e4 <GPIO_pClckCtrl+0x120>
 80005d4:	4b19      	ldr	r3, [pc, #100]	@ (800063c <GPIO_pClckCtrl+0x178>)
 80005d6:	695a      	ldr	r2, [r3, #20]
 80005d8:	4b18      	ldr	r3, [pc, #96]	@ (800063c <GPIO_pClckCtrl+0x178>)
 80005da:	2180      	movs	r1, #128	@ 0x80
 80005dc:	0389      	lsls	r1, r1, #14
 80005de:	430a      	orrs	r2, r1
 80005e0:	615a      	str	r2, [r3, #20]
            else GPIOE_PCLCK_DISABLE();
            break;
 80005e2:	e01b      	b.n	800061c <GPIO_pClckCtrl+0x158>
            else GPIOE_PCLCK_DISABLE();
 80005e4:	4b15      	ldr	r3, [pc, #84]	@ (800063c <GPIO_pClckCtrl+0x178>)
 80005e6:	695a      	ldr	r2, [r3, #20]
 80005e8:	4b14      	ldr	r3, [pc, #80]	@ (800063c <GPIO_pClckCtrl+0x178>)
 80005ea:	4919      	ldr	r1, [pc, #100]	@ (8000650 <GPIO_pClckCtrl+0x18c>)
 80005ec:	400a      	ands	r2, r1
 80005ee:	615a      	str	r2, [r3, #20]
            break;
 80005f0:	e014      	b.n	800061c <GPIO_pClckCtrl+0x158>
        case (uint32_t)GPIOF:
            if (state == ENABLE) GPIOF_PCLCK_ENABLE();
 80005f2:	1cfb      	adds	r3, r7, #3
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d107      	bne.n	800060a <GPIO_pClckCtrl+0x146>
 80005fa:	4b10      	ldr	r3, [pc, #64]	@ (800063c <GPIO_pClckCtrl+0x178>)
 80005fc:	695a      	ldr	r2, [r3, #20]
 80005fe:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <GPIO_pClckCtrl+0x178>)
 8000600:	2180      	movs	r1, #128	@ 0x80
 8000602:	03c9      	lsls	r1, r1, #15
 8000604:	430a      	orrs	r2, r1
 8000606:	615a      	str	r2, [r3, #20]
            else GPIOF_PCLCK_DISABLE();
            break;
 8000608:	e008      	b.n	800061c <GPIO_pClckCtrl+0x158>
            else GPIOF_PCLCK_DISABLE();
 800060a:	4b0c      	ldr	r3, [pc, #48]	@ (800063c <GPIO_pClckCtrl+0x178>)
 800060c:	695a      	ldr	r2, [r3, #20]
 800060e:	4b0b      	ldr	r3, [pc, #44]	@ (800063c <GPIO_pClckCtrl+0x178>)
 8000610:	4910      	ldr	r1, [pc, #64]	@ (8000654 <GPIO_pClckCtrl+0x190>)
 8000612:	400a      	ands	r2, r1
 8000614:	615a      	str	r2, [r3, #20]
            break;
 8000616:	e001      	b.n	800061c <GPIO_pClckCtrl+0x158>
        default:
            return GPIO_ERROR_INVALID_GPIO;
 8000618:	2302      	movs	r3, #2
 800061a:	e000      	b.n	800061e <GPIO_pClckCtrl+0x15a>
    }

    return GPIO_OK;
 800061c:	2300      	movs	r3, #0
}
 800061e:	0018      	movs	r0, r3
 8000620:	46bd      	mov	sp, r7
 8000622:	b002      	add	sp, #8
 8000624:	bd80      	pop	{r7, pc}
 8000626:	46c0      	nop			@ (mov r8, r8)
 8000628:	48001400 	.word	0x48001400
 800062c:	48001000 	.word	0x48001000
 8000630:	48000c00 	.word	0x48000c00
 8000634:	48000800 	.word	0x48000800
 8000638:	48000400 	.word	0x48000400
 800063c:	40021000 	.word	0x40021000
 8000640:	fffdffff 	.word	0xfffdffff
 8000644:	fffbffff 	.word	0xfffbffff
 8000648:	fff7ffff 	.word	0xfff7ffff
 800064c:	ffefffff 	.word	0xffefffff
 8000650:	ffdfffff 	.word	0xffdfffff
 8000654:	ffbfffff 	.word	0xffbfffff

08000658 <GPIO_WriteToOutputPin>:
 * Return value			: Value ranging 0-255
 *
 * ===============================================================================================
 */
uint8_t GPIO_WriteToOutputPin (GPIO_Reg_t *pGPIOx, uint8_t PinNum, uint8_t data)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	0008      	movs	r0, r1
 8000662:	0011      	movs	r1, r2
 8000664:	1cfb      	adds	r3, r7, #3
 8000666:	1c02      	adds	r2, r0, #0
 8000668:	701a      	strb	r2, [r3, #0]
 800066a:	1cbb      	adds	r3, r7, #2
 800066c:	1c0a      	adds	r2, r1, #0
 800066e:	701a      	strb	r2, [r3, #0]
	  if(data == SET)
 8000670:	1cbb      	adds	r3, r7, #2
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d10a      	bne.n	800068e <GPIO_WriteToOutputPin+0x36>
	    {
	        /* Write 1 to the output data register at the bit field corresponding to the pin number */
	        pGPIOx->ODR |= ( 1 << PinNum );
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	695b      	ldr	r3, [r3, #20]
 800067c:	1cfa      	adds	r2, r7, #3
 800067e:	7812      	ldrb	r2, [r2, #0]
 8000680:	2101      	movs	r1, #1
 8000682:	4091      	lsls	r1, r2
 8000684:	000a      	movs	r2, r1
 8000686:	431a      	orrs	r2, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	615a      	str	r2, [r3, #20]
 800068c:	e00a      	b.n	80006a4 <GPIO_WriteToOutputPin+0x4c>
	    }
	    else
	    {
	        /* Write 0 to the output data register at the bit field corresponding to the pin number */
	        pGPIOx->ODR &= ~( 1 << PinNum );	//Clear pin
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	1cfa      	adds	r2, r7, #3
 8000694:	7812      	ldrb	r2, [r2, #0]
 8000696:	2101      	movs	r1, #1
 8000698:	4091      	lsls	r1, r2
 800069a:	000a      	movs	r2, r1
 800069c:	43d2      	mvns	r2, r2
 800069e:	401a      	ands	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	615a      	str	r2, [r3, #20]
	    }
  return data;
 80006a4:	1cbb      	adds	r3, r7, #2
 80006a6:	781b      	ldrb	r3, [r3, #0]
}
 80006a8:	0018      	movs	r0, r3
 80006aa:	46bd      	mov	sp, r7
 80006ac:	b002      	add	sp, #8
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <GPIO_ToggleOutputPin>:
 * Return value			: NULL
 *
 * ===============================================================================================
 */
void GPIO_ToggleOutputPin  				(GPIO_Reg_t *pGPIOx, uint8_t PinNum)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	000a      	movs	r2, r1
 80006ba:	1cfb      	adds	r3, r7, #3
 80006bc:	701a      	strb	r2, [r3, #0]

	pGPIOx->ODR ^= (1 << PinNum);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	1cfa      	adds	r2, r7, #3
 80006c4:	7812      	ldrb	r2, [r2, #0]
 80006c6:	2101      	movs	r1, #1
 80006c8:	4091      	lsls	r1, r2
 80006ca:	000a      	movs	r2, r1
 80006cc:	405a      	eors	r2, r3
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	615a      	str	r2, [r3, #20]

}
 80006d2:	46c0      	nop			@ (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	b002      	add	sp, #8
 80006d8:	bd80      	pop	{r7, pc}

080006da <memset>:
 80006da:	0003      	movs	r3, r0
 80006dc:	1882      	adds	r2, r0, r2
 80006de:	4293      	cmp	r3, r2
 80006e0:	d100      	bne.n	80006e4 <memset+0xa>
 80006e2:	4770      	bx	lr
 80006e4:	7019      	strb	r1, [r3, #0]
 80006e6:	3301      	adds	r3, #1
 80006e8:	e7f9      	b.n	80006de <memset+0x4>
	...

080006ec <__libc_init_array>:
 80006ec:	b570      	push	{r4, r5, r6, lr}
 80006ee:	2600      	movs	r6, #0
 80006f0:	4c0c      	ldr	r4, [pc, #48]	@ (8000724 <__libc_init_array+0x38>)
 80006f2:	4d0d      	ldr	r5, [pc, #52]	@ (8000728 <__libc_init_array+0x3c>)
 80006f4:	1b64      	subs	r4, r4, r5
 80006f6:	10a4      	asrs	r4, r4, #2
 80006f8:	42a6      	cmp	r6, r4
 80006fa:	d109      	bne.n	8000710 <__libc_init_array+0x24>
 80006fc:	2600      	movs	r6, #0
 80006fe:	f000 f819 	bl	8000734 <_init>
 8000702:	4c0a      	ldr	r4, [pc, #40]	@ (800072c <__libc_init_array+0x40>)
 8000704:	4d0a      	ldr	r5, [pc, #40]	@ (8000730 <__libc_init_array+0x44>)
 8000706:	1b64      	subs	r4, r4, r5
 8000708:	10a4      	asrs	r4, r4, #2
 800070a:	42a6      	cmp	r6, r4
 800070c:	d105      	bne.n	800071a <__libc_init_array+0x2e>
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	00b3      	lsls	r3, r6, #2
 8000712:	58eb      	ldr	r3, [r5, r3]
 8000714:	4798      	blx	r3
 8000716:	3601      	adds	r6, #1
 8000718:	e7ee      	b.n	80006f8 <__libc_init_array+0xc>
 800071a:	00b3      	lsls	r3, r6, #2
 800071c:	58eb      	ldr	r3, [r5, r3]
 800071e:	4798      	blx	r3
 8000720:	3601      	adds	r6, #1
 8000722:	e7f2      	b.n	800070a <__libc_init_array+0x1e>
 8000724:	0800074c 	.word	0x0800074c
 8000728:	0800074c 	.word	0x0800074c
 800072c:	08000750 	.word	0x08000750
 8000730:	0800074c 	.word	0x0800074c

08000734 <_init>:
 8000734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000736:	46c0      	nop			@ (mov r8, r8)
 8000738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800073a:	bc08      	pop	{r3}
 800073c:	469e      	mov	lr, r3
 800073e:	4770      	bx	lr

08000740 <_fini>:
 8000740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000742:	46c0      	nop			@ (mov r8, r8)
 8000744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000746:	bc08      	pop	{r3}
 8000748:	469e      	mov	lr, r3
 800074a:	4770      	bx	lr
